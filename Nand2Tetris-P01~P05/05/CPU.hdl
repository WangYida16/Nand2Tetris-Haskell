// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	Mux(b=instruction[0],a=false,sel=instruction[15],out=instruction0);
	Mux(b=instruction[1],a=false,sel=instruction[15],out=instruction1);
	Mux(b=instruction[2],a=false,sel=instruction[15],out=instruction2);
	Mux(b=instruction[3],a=false,sel=instruction[15],out=instruction3,out=writeM);
	Mux(b=instruction[4],a=false,sel=instruction[15],out=instruction4);
	Mux(b=instruction[5],a=true,sel=instruction[15],out=instruction5);
	Mux(b=instruction[6],a=false,sel=instruction[15],out=instruction6);
	Mux(b=instruction[7],a=false,sel=instruction[15],out=instruction7);
	Mux(b=instruction[8],a=false,sel=instruction[15],out=instruction8);
	Mux(b=instruction[9],a=false,sel=instruction[15],out=instruction9);
	Mux(b=instruction[10],a=false,sel=instruction[15],out=instruction10);
	Mux(b=instruction[11],a=false,sel=instruction[15],out=instruction11);
	Mux(b=instruction[12],a=false,sel=instruction[15],out=instruction12);
	Mux(b=instruction[13],a=false,sel=instruction[15],out=instruction13);
	Mux(b=instruction[14],a=false,sel=instruction[15],out=instruction14);
	Mux(b=instruction[15],a=false,sel=instruction[15],out=instruction15);

	Mux16(a=instruction,b=ALUout,sel=instruction15,out=p1);
	ARegister(in=p1,load=instruction5,out=A,out[0..14]=addressM);
	Mux16(a=A,b=inM,sel=instruction12,out=AOrM);
	
	And(a=instruction2,b=ng,out=t1);
	And(a=instruction1,b=zr,out=t2);
	Or(a=ng,b=zr,out=temp);
	Not(in=temp,out=ps);
	And(a=instruction0,b=ps,out=t3);
	Or(a=t1,b=t2,out=t4);
	Or(a=t3,b=t4,out=loadPC);
	PC(in=A,reset=reset,inc=true,load=loadPC,out[0..14]=pc);
	
	DRegister(in=ALUout,load=instruction4,out=D);
	ALU(x=D,y=AOrM,zx=instruction11,nx=instruction10,zy=instruction9,ny=instruction8,f=instruction7,no=instruction6,zr=zr,ng=ng,out=ALUout,out=outM);
	
	
	
	
	
	
	
}